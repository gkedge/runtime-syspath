[tool.poetry]
name = "runtime-syspath"
version = "0.2.9"
authors = ["Greg Kedge <gregwork@kedges.com>"]
description = "Functions show and find each 'src' directory under working directory and add each to sys.path."
readme = "README.md"
homepage = "https://github.com/gkedge/runtime-syspath"
repository = "https://github.com/gkedge/runtime-syspath"
license = "MIT"
keywords = ["testing", "sys.path", "packaging", "dependency", "pyproject.toml"]
include = ["docs/**/*", "src/runtime_syspath/py.typed"]

classifiers = [
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Intended Audience :: Developers",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/gkedge/runtime-syspath/issues"

[tool.poetry.build]
generate-setup-file = false

[tool.poetry.scripts]
syspath_sleuth_injector = "runtime_syspath.syspath_sleuth.__main__:syspath_sleuth_main"

[tool.poetry.dependencies]
python = "^3.7"
diff-match-patch = "^20200713"
click = "^7.1.2"
importlib-metadata = "^2.0.0"

[tool.poetry.dev-dependencies]
black = { version = "^20.8b1", extras = ["d"] }
coverage = "^5.2.1"
isort = "~5.*"
pylint = "~2.*"
pytest = "~6.*"
pytest-dependency = "^0.5.1"
wheel = "tox-wheel"
wrapt = "^1.12.1"
mypy = "^0.782"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -sv -p no:cacheprovider"
norecursedirs = """
    .git .idea .venv docs src __pycache__ .* build dist
"""
testpaths = [
    "tests",
]

[tool.isort] # https://github.com/timothycrosley/isort/wiki/isort-Settings#full-reference-of-isort-settings
# Compatibility with Black (https://black.readthedocs.io/en/stable/the_black_code_style.html#how-black-wraps-lines)
# Style ---------------------
#honor-noqa = 'true'
profile = 'black'
line_length = 100
wrap_length = 100
multi_line_output = 3
combine_star = 'True'
remove-redundant-aliases = 'True'
combine_as_imports = 'True'
balanced_wrapping = 'True'
indent = 4
lines_after_imports = 2
lines_between_types = 0
include_trailing_comma = 'True'
use_parentheses = 'True'
# force_single_line  #Would override mult-line_output
# force_grid_wrap    #Would override mult-line_output
# Sections ------------------
known_datascience = ['pandas', 'numpy', 'scipy']
known_third_party = []
import_heading_stdlib = "Standard Library ---------------------------------------------------------------------"
import_heading_thirdparty = "Third Party --------------------------------------------------------------------------"
import_heading_datascience = "Data Science"
import_heading_firstparty = "Project ------------------------------------------------------------------------------"
# forced_separate=""
# Order ---------------------
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'DATASCIENCE', 'FIRSTPARTY', 'LOCALFOLDER']
case_sensitive = 'False'
length_sort = 'False'
order_by_type = 'True'
force_alphabetical_sort = 'False'
force_sort_within_sections = 'False'
from_first = 'False'
reverse-relative = 'True'
# force_to_top=""
# Inclusions/Exclusions -----
# skip               # Requires full file path
skip_glob = [
    ".eggs/**",
    ".git/*",
    ".hg/*",
    ".mypy_cache/*",
    ".tox/*",
    ".venv/*",
    "_build/*",
    "buck-out/*",
    "build/*",
    "dist/*",
    # Add additional patterns here:
    ".idea/*",
    "docs/source/conf.py" # File auto-generated by sphinx
]
filter_files = [
    ".eggs/**",
    ".git/*",
    ".hg/*",
    ".mypy_cache/*",
    ".tox/*",
    ".venv/*",
    "_build/*",
    "buck-out/*",
    "build/*",
    "dist/*",
    # Add additional patterns here:
    ".idea/*",
    "docs/source/conf.py" # File aut-generated by sphinx
]
# not_skip=[]
# Other ---------------------
atomic = 'False'

[tool.pylint.master]
max-line-length = 100
jobs = "0"    # Auto-detect the number of processors
fail-under = "10"
persistent = "no"
load-plugins = ""
limit-inference-results = "100"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"
extension-pkg-whitelist = ""
exit-zero = "no"
from-stdin = "no"
ignore-patterns = '''
\.eggs
|\.git
|\.hg
|\.mypy_cache
|\.tox
|\.venv
|\.idea
|_build
|buck-out
|build
|dist
|conf.py
'''
init-hook = """
from pylint.config.find_default_config_files import find_default_config_files;
from pathlib import Path; import sys;
for config_file in find_default_config_files():
    if config_file.endswith("pyproject.toml"):
        project_dir = Path(config_file).parent;
        sys.path.append(Path(project_dir, "src"))
        break
"""


[tool.pylint.message_control]
confidence = "HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED"
enable = ""
# bad-continuation, bad-whitespace - pylint complains about black's formatting.
# If we log at all, this demo package has preference for the clarity of
# f-strings over logging's format that avoids performing the format for disbled
# log levels.
disable = """
    duplicate-code
"""

[tool.pylint.basic]
argument-naming-style = "snake_case"
# argument-rgx=
attr-naming-style = "snake_case"
# attr-rgx=
class-attribute-naming-style = "snake_case"
# class-attribute-rgx=
class-naming-style = "PascalCase"
# class-rgx=
const-naming-style = "UPPER_CASE"
# const-rgx=
function-naming-style = "snake_case"
# function-rgx=
inlinevar-naming-style = "snake_case"
# inlinevar-rgx=
method-naming-style = "snake_case"
# method-rgx=
module-naming-style = "snake_case"
# module-rgx=
variable-naming-style = "snake_case"
# variable-rgx=
good-names = "i,j,k,_,df,ii, jj, kk"
good-names-rgxs = ""
bad-names = "foo,bar,baz,toto,tutu,tata,yow,yowsa"
bad-names-rgxs = ""
docstring-min-length = "-1"
include-naming-hint = "no"
name-group = ""
no-docstring-rgx = "^_"
property-classes = "abc.abstractproperty"

[tool.pylint.string]
check-quote-consistency = "yes"
check-str-concat-over-line-jumps = "yes"

[tool.pylint.imports] # Taken care of by isort, mostly included for error messages
allow-any-import-level = ""
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = "optparse,tkinter.tix"
ext-import-graph = ""
import-graph = ""
int-import-graph = ""
known-standard-library = ""
known-third-party = "enchant"
preferred-modules = ""

[tool.pylint.refactoring]
max-nested-blocks = "5"
never-returning-functions = "sys.exit"

[tool.pylint.logging]
logging-format-style = "new"
logging-modules = "logging"

[tool.pylint.spelling]
#spelling-dict = "en_US" # Requires pyenchant to be installed
#max-spelling-suggestions = "0"
#spelling-ignore-words = ""
#spelling-private-dict-file = ""
#spelling-store-unknown-words = "no"

[tool.pylint.miscellaneous]
notes = "TODO,FIXME,THINK"
notes-rgx = ""

[tool.pylint.typecheck]
contextmanager-decorators = "contextlib.contextmanager"
generated-members = ""
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = "optparse.Values,thread._local,_thread._local"
ignored-modules = ""
missing-member-hint = "yes"
missing-member-hint-distance = "1"
missing-member-max-choices = "1"
signature-mutators = ""

[tool.pylint.variables]
additional-builtins = ""
allow-global-unused-variables = "yes"
callbacks = "_cb"
dummy-variables-rgx = ""
ignored-argument-names = ""
init-import = "yes"
redefining-builtins-modules = "six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.format] # Taken care of by black, mostly included for error messages
expected-line-ending-format = "LF"
indent-after-paren = "4"
indent-string = "    "
max-line-length = "100"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
no-space-check = "trailing-comma"
single-line-class-stmt = "no"
single-line-if-stmt = "no"
max-module-lines = "1000"

[tool.pylint.similarities]
min-similarity-lines = "4"
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "no"

[tool.pylint.classes]
defining-attr-methods = "__init__,__new__,setUp,__post_init__"
exclude-protected = "_asdict,_fields,_replace,_source,_make"
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.design]
max-args = "5"
max-attributes = "7"
max-bool-expr = "5"
max-branches = "12"
max-locals = "15"
max-parents = "7"
min-public-methods = "2"
max-public-methods = "20"
max-returns = "6"
max-statements = "50"

[tool.pylint.exceptions]
overgeneral-exceptions = "BaseException,Exception"

[tool.pylint.reports]
output-format = "text"
msg-template = "{path}:{line}:{column}: Pylint: {msg}. [{msg_id}: {symbol}]"
reports = "yes"   # Not availalbe with multiple jobs
score = "no"      # Not availalbe with multiple jobs
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

[tool.black]
line-length = 100
target-version = ['py37', 'py38']

include = '\.pyi?$' # Default
exclude = '''
    # Directory exclusions
    /(,
      # Defaults:
      \.eggs
      | \.git
      | \.hg
      | \.mypy_cache
      | \.tox
      | \.venv
      | _build
      | buck-out
      | build
      | dist
      # Add additional patterns here:
      | \.idea
    )/
    | # File exclusions
#    /(
      # Add additional file patterns here:
      # my_file\.py
#    )
'''

[build-system]
requires = ["poetry>=1.1.0b2"]
build-backend = "poetry.masonry.api"
